{"version":3,"sources":["components/Button/Button.module.scss","components/Loader/Loader.module.scss","components/Modal/Modal.module.scss","components/Card/Card.module.scss","components/Container/Container.module.scss","assets/img/star.svg","assets/img/pencil.svg","components/Button/index.ts","components/Button/Button.tsx","redux/slices/modalSlice.ts","api/api.js","redux/slices/notesSlice.ts","components/Card/index.ts","components/Card/Card.tsx","helpers/clampString.ts","redux/selectors/notesSelector.tsx","components/Loader/index.ts","components/Loader/Loader.tsx","components/Switcher/Switcher.tsx","components/Switcher/index.ts","components/Container/index.ts","components/Container/Container.tsx","redux/selectors/modalSelector.ts","helpers/dateFormatter.ts","components/Modal/index.ts","components/Modal/Modal.tsx","App.tsx","redux/store.ts","index.tsx","components/Switcher/Switcher.module.scss"],"names":["module","exports","Button","iconUrl","tooltip","clickHandler","onClick","className","styles","btn","src","alt","modalSlice","createSlice","name","initialState","visible","id","reducers","setModalVisibility","state","action","payload","actions","todoAPI","axios","get","then","response","data","fetchNotes","createAsyncThunk","a","notesSlice","items","isLoaded","filtered","addNote","removeNote","filter","item","changeNoteText","mutableItem","findIndex","text","value","changeFavouriteStatus","favourite","changeNoteColor","color","setFilteredStatus","setNotesOrder","hoverCardIndex","hoverID","dragCardIndex","cardID","extraReducers","builder","addCase","fulfilled","Card","inputString","maxLength","card","index","moveCard","ref","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","dispatch","useDispatch","useDrag","type","isDragging","opacity","drag","style","backgroundColor","removeBtn","window","confirm","starIcon","length","slice","bottomSide","date","pencilIcon","getNotes","createSelector","notes","getLoadedStatus","getFilteredStatus","Loader","ldsSpinner","Switcher","filteredStatus","useSelector","changeFilteredStatus","switcher","active","React","memo","Container","useEffect","useCallback","container","addBtn","list","map","loader","getModalVisibility","modal","months","Modal","useState","setValue","setColor","noteInfo","find","getNoteById","formRef","closeClickHandler","document","body","overflow","e","stopPropagation","close","textarea","onChange","target","placeholder","onChangeComplete","hex","controls","preventDefault","buttons","trim","formattedDate","getMonth","getDate","getFullYear","getFormattedDate","Date","newNoteInfo","Math","random","App","store","configureStore","reducer","modalReducer","notesReducer","ReactDOM","render","DndProvider","backend","HTML5Backend","getElementById"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,IAAM,sB,oBCAxBD,EAAOC,QAAU,CAAC,WAAa,6B,yCCA/BD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,SAAW,wBAAwB,WAAa,0BAA0B,UAAY,yBAAyB,QAAU,yB,mBCArMD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,KAAO,mBAAmB,UAAY,wBAAwB,WAAa,yBAAyB,KAAO,qB,mBCA3LD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,SAAW,4BAA4B,KAAO,wBAAwB,OAAS,0BAA0B,OAAS,4B,gICD9J,MAA0B,iCCA1B,MAA0B,mC,yBCE1BC,MCMA,YAAkE,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,aAC/C,OACI,wBAAQC,QAASD,EAAcE,UAAWC,IAAOC,IAAjD,SACI,qBAAKC,IAAKP,EAASQ,IAAKP,O,eCCvBQ,EAAaC,YAAY,CAClCC,KAAM,QACNC,aAP8B,CAC9BC,SAAS,EACTC,GAAI,MAMJC,SAAU,CACNC,mBAAoB,SAACC,EAAOC,GACxBD,EAAMJ,QAAUK,EAAOC,QAAQN,QAC/BI,EAAMH,GAAKI,EAAOC,QAAQL,OAKxBE,EAAsBP,EAAWW,QAAjCJ,mBAECP,IAAf,Q,qDCvBaY,EAAU,WAEf,OAAOC,IAAMC,IAAI,YAAYC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCYlDC,EAAaC,YACtB,mBADsC,sBAEtC,sBAAAC,EAAA,sEACiBR,IADjB,oFAKSS,EAAapB,YAAY,CAClCC,KAAM,QACNC,aAf8B,CAC9BmB,MAAO,GACPC,UAAU,EACVC,UAAU,GAaVlB,SAAU,CACNmB,QAAS,SAACjB,EAAOC,GACbD,EAAMc,MAAN,sBAAkBd,EAAMc,OAAxB,CAA+Bb,EAAOC,WAE1CgB,WAAY,SAAClB,EAAOC,GAChBD,EAAMc,MAAQd,EAAMc,MAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKvB,KAAOI,EAAOC,YAEhEmB,eAAgB,SAACrB,EAAOC,GACpB,IAAMqB,EAActB,EAAMc,MAAMS,WAAU,SAAAH,GAAI,OAAIA,EAAKvB,KAAOI,EAAOC,QAAQL,MAC7EG,EAAMc,MAAMQ,GAAaE,KAAOvB,EAAOC,QAAQuB,OAEnDC,sBAAuB,SAAC1B,EAAOC,GAC3B,IAAMqB,EAActB,EAAMc,MAAMS,WAAU,SAAAH,GAAI,OAAIA,EAAKvB,KAAOI,EAAOC,WACrEF,EAAMc,MAAMQ,GAAaK,WAAa3B,EAAMc,MAAMQ,GAAaK,WAEnEC,gBAAiB,SAAC5B,EAAOC,GACrB,IAAMqB,EAActB,EAAMc,MAAMS,WAAU,SAAAH,GAAI,OAAIA,EAAKvB,KAAOI,EAAOC,QAAQL,MAC7EG,EAAMc,MAAMQ,GAAaO,MAAQ5B,EAAOC,QAAQ2B,OAEpDC,kBAAmB,SAAC9B,EAAOC,GACvBD,EAAMgB,SAAWf,EAAOC,SAE5B6B,cAAe,SAAC/B,EAAOC,GACnB,IAAM+B,EAAiBhC,EAAMc,MAAMS,WAAU,SAAAH,GAAI,OAAIA,EAAKvB,KAAOI,EAAOC,QAAQ+B,WAC1EC,EAAgBlC,EAAMc,MAAMS,WAAU,SAAAH,GAAI,OAAIA,EAAKvB,KAAOI,EAAOC,QAAQiC,UAFC,EAGpB,CAACnC,EAAMc,MAAMoB,GAAgBlC,EAAMc,MAAMkB,IAApGhC,EAAMc,MAAMkB,GAHmE,KAGlDhC,EAAMc,MAAMoB,GAHsC,OAMxFE,cAAe,SAACC,GACZA,EAAQC,QAAQ5B,EAAW6B,WAAW,SAACvC,EAAOC,GAC1CD,EAAMe,UAAW,EACjBf,EAAMc,MAAQb,EAAOC,cAK1B,EAAwHW,EAAWV,QAA5Hc,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,WAAYG,EAA5B,EAA4BA,eAAgBK,EAA5C,EAA4CA,sBAAuBE,EAAnE,EAAmEA,gBAAiBE,EAApF,EAAoFA,kBAAmBC,EAAvG,EAAuGA,cAE/FlB,IAAf,Q,sBC9De2B,MCuBA,YAAoD,ICzBvCC,EAAqBC,EDyBlBC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAElCC,EAAMC,iBAAuB,MAEnC,EAA8BC,YAAQ,CAClCC,OAAQ,OACRC,QAFkC,SAE1BC,GACJ,MAAO,CACHC,UAAWD,EAAQE,iBAG3BC,MAPkC,SAO5BlC,EAAgB+B,GAA6B,IAAD,EAC9C,GAAKL,EAAIS,QAAT,CAGA,IAAMC,EAAYpC,EAAKwB,MACjBa,EAAab,EACnB,GAAIY,IAAcC,EAAlB,CAGA,IAAMC,EAAiB,UAAGZ,EAAIS,eAAP,aAAG,EAAaI,wBACjCC,GACDF,EAAkBG,OAASH,EAAkBI,KAAO,EAEnDC,EADeZ,EAAQa,kBACkBC,EAAIP,EAAkBI,IACjEN,EAAYC,GAAcM,EAAeH,GAGzCJ,EAAYC,GAAcM,EAAeH,IAG7Cf,EAASW,EAAWC,GACpBrC,EAAKwB,MAAQa,QA5BrB,mBAASL,EAAT,KAASA,UAAac,EAAtB,KAiCMC,EAAWC,cAgBjB,EAA+BC,YAAQ,CACnCC,KAAM,OACNlD,KAAM,WACF,MAAO,CAAEvB,GAAI8C,EAAK9C,GAAI+C,UAE1BM,QAAS,SAACC,GAAD,MAAmB,CACxBoB,WAAYpB,EAAQoB,iBAN5B,mBAUMC,EAVN,KAASD,WAUoB,EAAI,EAGjC,OAFAE,EAXA,MAWKP,EAAKpB,IAGN,sBACIA,IAAKA,EACL3D,UAAWC,IAAOuD,KAClB+B,MAAO,CAACC,gBAAiBhC,EAAKd,MAAO2C,WACrC,kBAAiBpB,EAJrB,UAMI,wBACIjE,UAAWC,IAAOwF,UAClB1F,QAhCZ,WACO2F,OAAOC,QAAQ,+CACdX,EAASjD,EAAWyB,EAAK9C,MA4BzB,SAII,0CAEJ,gCACM8C,EAAKhB,WACH,qBAAKxC,UAAWC,IAAOuC,UAAvB,SACI,cAAC,EAAD,CAAQ1C,aAjC5B,WACIkF,EAASzC,EAAsBiB,EAAK9C,MAgCiBb,QAAQ,IAAID,QAASgG,MAGlE,mBAAG5F,UAAWC,IAAOoC,KAArB,UC9GYiB,ED8G4BE,EAAKnB,KC9GZkB,ED8GkB,IC7G5DD,EAAYuC,QAAUtC,EACdD,GAEXA,EAAcA,EAAYwC,MAAM,EAAGvC,GACnCD,GAAe,aD2GP,sBAAKtD,UAAWC,IAAO8F,WAAvB,UACI,mBAAG/F,UAAWC,IAAO+F,KAArB,SAA4BxC,EAAKwC,OACjC,cAAC,EAAD,CAAQpG,QAASqG,EAAYpG,QAAQ,OAAOC,aAlDxD,WACIkF,EAASpE,EAAmB,CAACH,SAAS,EAAMC,GAAI8C,EAAK9C,gB,QE9DhDwF,EAAWC,aAChB,SAACtF,GAAD,OAAsBA,EAAMuF,SAC5B,YAAwB,IAAtBzE,EAAqB,EAArBA,MACE,OADmB,EAAdE,SAIMF,EAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKO,aAF1Bb,KAOV0E,EAAkB,SAACxF,GAAD,OAAsBA,EAAMuF,MAAMxE,UAIpD0E,EAAoB,SAACzF,GAAD,OAAsBA,EAAMuF,MAAMvE,U,kBChBpD0E,MCAA,WACX,OACI,sBAAKvG,UAAWC,IAAOuG,WAAvB,UACI,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,4B,iBCVZ,SAASC,IACL,IAAMC,EAAiBC,YAAYL,GAC7BtB,EAAWC,cAEjB,SAAS2B,EAAsBtE,GAC3B0C,EAASrC,EAAkBL,IAG/B,OACI,sBAAKtC,UAAWC,IAAO4G,SAAvB,UACI,0CACA,wBACI9G,QAAS,kBAAM6G,GAAqB,IACpC5G,UAAY0G,EAAiC,GAAhBzG,IAAO6G,OAFxC,iBAIA,wBACI/G,QAAS,kBAAM6G,GAAqB,IACpC5G,UAAW0G,EAAiBzG,IAAO6G,OAAS,GAFhD,wBAQGC,IC3BAN,GD2BAM,IAAMC,KAAKP,GE3BXQ,OCQA,WAEX,IAAMjC,EAAWC,cAEXrD,EAAW+E,YAAYN,GACvB1E,EAAQgF,YAAYT,GAE1BgB,qBAAU,WACNlC,EAASzD,OAEV,IAMH,IAAMmC,EAAWyD,uBAAY,SAAC9C,EAAmBC,GACzCU,EAASpC,EAAc,CAACE,QAASnB,EAAM2C,GAAY5D,GAAIsC,OAAQrB,EAAM0C,GAAW3D,QAGpF,CAACiB,IAGL,OACI,qBAAK3B,UAAWC,IAAOmH,UAAvB,SACI,sBAAKpH,UAAU,UAAf,UACI,qBAAKA,UAAWC,IAAO4G,SAAvB,SACI,cAAC,GAAD,MAEHjF,GACG,wBACI5B,UAAWC,IAAOoH,OAClBtH,QApBpB,WACIiF,EAASpE,EAAmB,CAACH,SAAS,EAAMC,GAAI,SAiBpC,SAII,uCAGR,qBAAKV,UAAWC,IAAOqH,KAAvB,SACK1F,EACGD,EAAM4F,KAAI,SAACtF,EAAMwB,GACb,OAAO,cAAC,EAAD,CAAoBD,KAAMvB,EAAMyB,SAAUA,EAAUD,MAAOA,GAAhDxB,EAAKvB,OAE3B,qBAAKV,UAAWC,IAAOuH,OAAvB,SACI,cAAC,EAAD,c,8BCnDfC,GAAsB,SAAC5G,GAAD,OAAsBA,EAAM6G,OCFzDC,GAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QCExFC,OCYA,WACX,MAA0BC,mBAAiB,IAA3C,mBAAOvF,EAAP,KAAcwF,EAAd,KACA,EAA0BD,mBAAiB,WAA3C,mBAAOnF,EAAP,KAAcqF,EAAd,KAEA,EAAsBpB,YAAYc,IAA3B/G,EAAP,EAAOA,GAAID,EAAX,EAAWA,QACLuH,EAAWrB,aAAY,SAAC9F,GAAD,OVHL,SAACA,EAAkBH,GAAnB,OAAyCG,EAAMuF,MAAMzE,MAAMsG,MAAK,SAAAhG,GAAI,OAAIA,EAAKvB,KAAOA,KUGzDwH,CAAYrH,EAAOH,MAMtEwG,qBAAU,WACHc,IACCF,EAASE,EAAS3F,MAClB0F,EAASC,EAAStF,UAGvB,IAEH,IAAMyF,EAAUpB,IAAMnD,OAAwB,MAExCoB,EAAWC,cAEjB,SAASmD,IACLpD,EAASpE,EAAmB,CAACH,SAAS,EAAOC,GAAI,QAiDrD,OATAwG,qBAAU,WAIN,OAHGzG,IACC4H,SAASC,KAAK/C,MAAMgD,SAAW,UAE5B,WACHF,SAASC,KAAK/C,MAAMgD,SAAW,aAEpC,CAAC9H,IAGA,qBACIT,UAAWC,KAAOyH,MAClB3H,QAASqI,EAFb,SAII,uBACIzE,IAAKwE,EACLpI,QAAS,SAACyI,GAAD,OAA0CA,EAAEC,mBAFzD,UAII,qBACIzI,UAAWC,KAAOyI,MAClB3I,QAASqI,EAFb,kBAIA,qBAAKpI,UAAWC,KAAO0I,SAAvB,SACI,0BACIrG,MAAOA,EACPsG,SAlFpB,SAA2BJ,GACvBV,EAASU,EAAEK,OAAOvG,QAkFFwG,YAAY,mBAGpB,sBAAK9I,UAAWC,KAAO8F,WAAvB,UACI,8BACI,cAAC,KAAD,CACIgD,iBAAkB,SAACrG,GAAD,OAAWqF,EAASrF,EAAMsG,MAC5CtG,MAAOA,MAGf,sBAAK1C,UAAWC,KAAOgJ,SAAvB,UACa,OAAPvI,GAAesH,GACb,yBACIhI,UAAWC,KAAOuC,UAClBzC,QA/C5B,SAAwByI,GACpBA,EAAEU,iBACQ,OAAPxI,GACCsE,EAASzC,EAAsB7B,KA0Cf,UAII,iCAAOsH,EAASxF,UAAY,cAAgB,SAA5C,gBACA,qBAAKrC,IAAKyF,EAAUxF,IAAI,wBAGhC,sBAAKJ,UAAWC,KAAOkJ,QAAvB,UACI,wBACIpJ,QAAgB,OAAPW,EArFrC,SAAqB8H,GAEjB,GADAA,EAAEU,iBACyB,IAAxB5G,EAAM8G,OAAOvD,OAAc,CAC1B,IACMwD,EF3Cc,SAACrD,GAC7B,MAAM,GAAN,OAAU2B,GAAO3B,EAAKsD,YAAtB,YAAqCtD,EAAKuD,UAA1C,aAAwDvD,EAAKwD,eE0C/BC,CADT,IAAIC,MAEXC,EAAqB,CACvBjJ,GAAoB,IAAhBkJ,KAAKC,SACT7D,KAAMqD,EACN7G,WAAW,EACXE,MAAOA,EACPL,KAAMC,EAAM8G,QAEhBpE,EAASlD,EAAQ6H,IACjBvB,MAIR,SAAmBI,GACfA,EAAEU,iBACQ,OAAPxI,IACIsH,GAAYA,EAAS3F,OAASC,GAAiC,IAAxBA,EAAM8G,OAAOvD,QACnDb,EAAS9C,EAAe,CAACxB,KAAI4B,WAE9B0F,GAAYA,EAAStF,QAAUA,GAC9BsC,EAASvC,EAAgB,CAAC/B,KAAIgC,WAElC0F,MA0DgB,mBAGA,wBACIrI,QAASqI,EADb,mCC7Gb0B,OAbf,WACI,IAAOrJ,EAAWkG,YAAYc,IAAvBhH,QAEP,OACI,gCACI,cAAC,GAAD,IACEA,GACE,cAAC,GAAD,QCTHsJ,GAAQC,YAAe,CAChCC,QAAS,CACLvC,MAAOwC,EACP9D,MAAO+D,K,oBCEfC,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAACO,GAAA,EAAD,CAAaC,QAASC,KAAtB,SACI,cAAC,GAAD,QAGRnC,SAASoC,eAAe,U,mBCd5BhL,EAAOC,QAAU,CAAC,SAAW,2BAA2B,OAAS,4B","file":"static/js/main.74926722.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1Lkv5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsSpinner\":\"Loader_ldsSpinner__3EoF6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1vwov\",\"close\":\"Modal_close__2EfR5\",\"textarea\":\"Modal_textarea__38nGH\",\"bottomSide\":\"Modal_bottomSide__3-nPS\",\"favourite\":\"Modal_favourite__2n_GL\",\"buttons\":\"Modal_buttons__1vmlV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\",\"removeBtn\":\"Card_removeBtn__2pVc6\",\"text\":\"Card_text__nO5sW\",\"favourite\":\"Card_favourite__2vU3w\",\"bottomSide\":\"Card_bottomSide__2Cwd3\",\"date\":\"Card_date__2c778\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3eZVY\",\"switcher\":\"Container_switcher__2_EGx\",\"list\":\"Container_list__2bdlc\",\"addBtn\":\"Container_addBtn__2gglr\",\"loader\":\"Container_loader__3Zdq0\"};","export default __webpack_public_path__ + \"static/media/star.de82f684.svg\";","export default __webpack_public_path__ + \"static/media/pencil.32c487a9.svg\";","import Button from './Button'\n\nexport default Button","import styles from './Button.module.scss'\n\ninterface IButtonProps {\n    iconUrl: string\n    tooltip: string\n    clickHandler: () => void\n}\n\nexport default function Button ({iconUrl, tooltip, clickHandler}: IButtonProps) {\n    return (\n        <button onClick={clickHandler} className={styles.btn}>\n            <img src={iconUrl} alt={tooltip} />\n        </button>\n    )\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport interface IModalState {\n    visible: boolean,\n    id: number | null\n}\n\nconst initialState: IModalState = {\n    visible: false,\n    id: null\n}\n\nexport const modalSlice = createSlice({\n    name: 'modal',\n    initialState,\n    reducers: {\n        setModalVisibility: (state, action: PayloadAction<{visible: boolean, id: number | null}>) => {\n            state.visible = action.payload.visible\n            state.id = action.payload.id\n        }\n    }\n})\n\nexport const {setModalVisibility} = modalSlice.actions\n\nexport default modalSlice.reducer","import axios from \"axios\";\n\nexport const todoAPI = {\n    getNotes() {\n        return axios.get('/db.json').then(response => response.data)\n    }\n}\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {ICard} from \"../../interfaceTypes/interfaceTypes\";\nimport {todoAPI} from \"../../api/api\";\n\nexport interface INotesState {\n    items: ICard[]\n    isLoaded: boolean\n    filtered: boolean,\n}\n\nconst initialState: INotesState = {\n    items: [],\n    isLoaded: false,\n    filtered: false\n}\n\nexport const fetchNotes = createAsyncThunk(\n    'notes/fetchNotes',\n    async () => {\n        return await todoAPI.getNotes()\n    }\n)\n\nexport const notesSlice = createSlice({\n    name: 'notes',\n    initialState,\n    reducers: {\n        addNote: (state, action: PayloadAction<ICard>) => {\n            state.items = [...state.items, action.payload]\n        },\n        removeNote: (state, action: PayloadAction<number>) => {\n            state.items = state.items.filter(item => item.id !== action.payload)\n        },\n        changeNoteText: (state, action: PayloadAction<{id: number, value: string}>) => {\n            const mutableItem = state.items.findIndex(item => item.id === action.payload.id)\n            state.items[mutableItem].text = action.payload.value\n        },\n        changeFavouriteStatus: (state, action: PayloadAction<number>) => {\n            const mutableItem = state.items.findIndex(item => item.id === action.payload)\n            state.items[mutableItem].favourite = !state.items[mutableItem].favourite\n        },\n        changeNoteColor: (state, action: PayloadAction<{id: number, color: string}>) => {\n            const mutableItem = state.items.findIndex(item => item.id === action.payload.id)\n            state.items[mutableItem].color = action.payload.color\n        },\n        setFilteredStatus: (state, action: PayloadAction<boolean>) => {\n            state.filtered = action.payload\n        },\n        setNotesOrder: (state, action: PayloadAction<{hoverID: number, cardID: number}>) => {\n            const hoverCardIndex = state.items.findIndex(item => item.id === action.payload.hoverID)\n            const dragCardIndex = state.items.findIndex(item => item.id === action.payload.cardID);\n            [state.items[hoverCardIndex], state.items[dragCardIndex]] = [state.items[dragCardIndex], state.items[hoverCardIndex]]\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchNotes.fulfilled, (state, action: PayloadAction<ICard[]>) => {\n            state.isLoaded = true\n            state.items = action.payload\n        })\n    }\n})\n\nexport const {addNote, removeNote, changeNoteText, changeFavouriteStatus, changeNoteColor, setFilteredStatus, setNotesOrder} = notesSlice.actions\n\nexport default notesSlice.reducer","import Card from './Card'\n\nexport default Card","import styles from './Card.module.scss'\nimport starIcon from '../../assets/img/star.svg'\nimport pencilIcon from '../../assets/img/pencil.svg'\nimport {ICard} from \"../../interfaceTypes/interfaceTypes\";\nimport Button from \"../Button\";\nimport {useDispatch} from \"react-redux\";\nimport {setModalVisibility} from \"../../redux/slices/modalSlice\";\nimport {changeFavouriteStatus, removeNote} from \"../../redux/slices/notesSlice\";\nimport React, {useRef} from \"react\";\nimport {clampString} from \"../../helpers/clampString\";\nimport { useDrag, useDrop, DropTargetMonitor } from 'react-dnd'\nimport { XYCoord } from 'dnd-core'\n\ninterface ICardProps {\n    card: ICard,\n    index: number\n    moveCard: (dragIndex: number, hoverIndex: number) => void\n}\n\ninterface DragItem {\n    index: number\n    id: string\n    type: string\n}\n\nexport default function Card ({card, index, moveCard}:ICardProps) {\n\n    const ref = useRef<HTMLDivElement>(null)\n\n    const [{ handlerId }, drop] = useDrop({\n        accept: 'card',\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            }\n        },\n        hover(item: DragItem, monitor: DropTargetMonitor) {\n            if (!ref.current) {\n                return\n            }\n            const dragIndex = item.index\n            const hoverIndex = index\n            if (dragIndex === hoverIndex) {\n                return\n            }\n            const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            const hoverMiddleY =\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            const clientOffset = monitor.getClientOffset()\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return\n            }\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return\n            }\n            moveCard(dragIndex, hoverIndex)\n            item.index = hoverIndex\n        },\n    })\n\n\n    const dispatch = useDispatch()\n\n    function clickHandler () {\n        dispatch(setModalVisibility({visible: true, id: card.id}))\n    }\n\n    function removeHandler () {\n        if(window.confirm(\"Are you sure that you want to remove note?\")) {\n            dispatch(removeNote(card.id))\n        }\n    }\n\n    function editFavourite () {\n        dispatch(changeFavouriteStatus(card.id))\n    }\n\n    const [{ isDragging }, drag] = useDrag({\n        type: 'card',\n        item: () => {\n            return { id: card.id, index }\n        },\n        collect: (monitor: any) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n\n    const opacity = isDragging ? 0 : 1\n    drag(drop(ref))\n\n    return (\n        <div\n            ref={ref}\n            className={styles.card}\n            style={{backgroundColor: card.color, opacity}}\n            data-handler-id={handlerId}\n        >\n            <button\n                className={styles.removeBtn}\n                onClick={removeHandler}\n            >\n                <span>&times;</span>\n            </button>\n            <div>\n                { card.favourite &&\n                    <div className={styles.favourite}>\n                        <Button clickHandler={editFavourite} tooltip='*' iconUrl={starIcon} />\n                    </div>\n                }\n                <p className={styles.text}>{clampString(card.text, 110)}</p>\n            </div>\n            <div className={styles.bottomSide}>\n                <p className={styles.date}>{card.date}</p>\n                <Button iconUrl={pencilIcon} tooltip='edit' clickHandler={clickHandler} />\n            </div>\n        </div>\n    )\n}","export function clampString(inputString: string, maxLength: number) {\n    if(inputString.length <= maxLength) {\n        return inputString;\n    }\n    inputString = inputString.slice(0, maxLength);\n    inputString += \"...\";\n\n    return inputString;\n}","import {RootState} from \"../store\";\nimport {createSelector} from \"@reduxjs/toolkit\";\n\nexport const getNotes = createSelector(\n        (state: RootState) => state.notes,\n        ({items, filtered}) => {\n            if(!filtered) {\n                return items\n            } else {\n                return items.filter(item => item.favourite)\n            }\n        }\n    )\n\nexport const getLoadedStatus = (state: RootState) => state.notes.isLoaded\n\nexport const getNoteById = ((state: RootState, id: number | null) => state.notes.items.find(item => item.id === id))\n\nexport const getFilteredStatus = (state: RootState) => state.notes.filtered","import Loader from './Loader'\n\nexport default Loader","import styles from './Loader.module.scss'\n\nexport default function Loader () {\n    return (\n        <div className={styles.ldsSpinner}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    )\n}","import styles from './Switcher.module.scss'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getFilteredStatus} from \"../../redux/selectors/notesSelector\";\nimport {setFilteredStatus} from \"../../redux/slices/notesSlice\";\nimport React from \"react\";\n\nfunction Switcher () {\n    const filteredStatus = useSelector(getFilteredStatus)\n    const dispatch = useDispatch()\n\n    function changeFilteredStatus (value: boolean) {\n        dispatch(setFilteredStatus(value))\n    }\n\n    return (\n        <div className={styles.switcher}>\n            <span>Show: </span>\n            <button\n                onClick={() => changeFilteredStatus(false)}\n                className={!filteredStatus ? styles.active : ''}\n            >All</button>\n            <button\n                onClick={() => changeFilteredStatus(true)}\n                className={filteredStatus ? styles.active : ''}\n            >Starred</button>\n        </div>\n    )\n}\n\nexport default React.memo(Switcher)","import Switcher from './Switcher'\n\nexport default Switcher","import Container from './Container'\n\nexport default Container","import styles from './Container.module.scss'\nimport Card from \"../Card\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setModalVisibility} from \"../../redux/slices/modalSlice\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {getLoadedStatus, getNotes} from \"../../redux/selectors/notesSelector\";\nimport {fetchNotes, setNotesOrder} from \"../../redux/slices/notesSlice\";\nimport Loader from \"../Loader\";\nimport Switcher from '../Switcher'\n\nexport default function Container () {\n\n    const dispatch = useDispatch()\n\n    const isLoaded = useSelector(getLoadedStatus)\n    const items = useSelector(getNotes)\n\n    useEffect(() => {\n        dispatch(fetchNotes())\n        //eslint-disable-next-line\n    }, [])\n\n    function clickHandler () {\n        dispatch(setModalVisibility({visible: true, id: null}))\n    }\n\n    const moveCard = useCallback((dragIndex: number, hoverIndex: number) => {\n            dispatch(setNotesOrder({hoverID: items[hoverIndex].id, cardID: items[dragIndex].id}))\n        },\n        //eslint-disable-next-line\n        [items]\n    );\n\n    return (\n        <div className={styles.container}>\n            <div className=\"wrapper\">\n                <div className={styles.switcher}>\n                    <Switcher/>\n                </div>\n                {isLoaded &&\n                    <button\n                        className={styles.addBtn}\n                        onClick={clickHandler}\n                    >\n                        <span>+</span>\n                    </button>\n                }\n                <div className={styles.list}>\n                    {isLoaded ?\n                        items.map((item, index) => {\n                            return <Card key={item.id} card={item} moveCard={moveCard} index={index} />\n                        }) :\n                        <div className={styles.loader}>\n                            <Loader/>\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}","import {RootState} from \"../store\";\n\nexport const getModalVisibility = ((state: RootState) => state.modal)","const months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sep.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n\nexport const getFormattedDate = (date: Date) => {\n    return `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n}","import Modal from './Modal'\n\nexport default Modal","import React, {useEffect} from 'react'\nimport styles from './Modal.module.scss'\nimport {useState} from \"react\"\nimport {TwitterPicker} from \"react-color\";\nimport starIcon from '../../assets/img/star.svg'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setModalVisibility} from \"../../redux/slices/modalSlice\";\nimport {getModalVisibility} from \"../../redux/selectors/modalSelector\";\nimport {getNoteById} from \"../../redux/selectors/notesSelector\";\nimport {RootState} from \"../../redux/store\";\nimport {ICard} from \"../../interfaceTypes/interfaceTypes\";\nimport {addNote, changeFavouriteStatus, changeNoteColor, changeNoteText} from \"../../redux/slices/notesSlice\";\nimport {getFormattedDate} from \"../../helpers/dateFormatter\";\n\nexport default function Modal () {\n    const [value, setValue] = useState<string>('')\n    const [color, setColor] = useState<string>('#7BDCB5')\n\n    const {id, visible} = useSelector(getModalVisibility)\n    const noteInfo = useSelector((state: RootState) => getNoteById(state, id))\n\n    function changeInputValue (e: React.ChangeEvent<HTMLTextAreaElement>) {\n        setValue(e.target.value)\n    }\n\n    useEffect(() => {\n        if(noteInfo) {\n            setValue(noteInfo.text)\n            setColor(noteInfo.color)\n        }\n        //eslint-disable-next-line\n    }, [])\n\n    const formRef = React.useRef<HTMLFormElement>(null)\n\n    const dispatch = useDispatch()\n\n    function closeClickHandler () {\n        dispatch(setModalVisibility({visible: false, id: null}))\n    }\n\n    function addNewNote (e: React.SyntheticEvent) {\n        e.preventDefault()\n        if(value.trim().length !== 0) {\n            const date = new Date()\n            const formattedDate = getFormattedDate(date)\n            const newNoteInfo: ICard = {\n                id: Math.random() * 1000,\n                date: formattedDate,\n                favourite: false,\n                color: color,\n                text: value.trim()\n            }\n            dispatch(addNote(newNoteInfo))\n            closeClickHandler()\n        }\n    }\n\n    function editNote (e: React.SyntheticEvent) {\n        e.preventDefault()\n        if(id !== null) {\n            if(noteInfo && noteInfo.text !== value && value.trim().length !== 0) {\n                dispatch(changeNoteText({id, value}))\n            }\n            if(noteInfo && noteInfo.color !== color) {\n                dispatch(changeNoteColor({id, color}))\n            }\n            closeClickHandler()\n        }\n    }\n\n    function editFavourite (e: React.SyntheticEvent) {\n        e.preventDefault()\n        if(id !== null) {\n            dispatch(changeFavouriteStatus(id))\n        }\n    }\n\n    useEffect(() => {\n        if(visible) {\n            document.body.style.overflow = 'hidden'\n        }\n        return () => {\n            document.body.style.overflow = 'visible'\n        }\n    }, [visible])\n\n    return (\n        <div\n            className={styles.modal}\n            onClick={closeClickHandler}\n        >\n            <form\n                ref={formRef}\n                onClick={(e: React.MouseEvent<HTMLFormElement>) => e.stopPropagation()}\n            >\n                <div\n                    className={styles.close}\n                    onClick={closeClickHandler}\n                >&times;</div>\n                <div className={styles.textarea}>\n                    <textarea\n                        value={value}\n                        onChange={changeInputValue}\n                        placeholder='Note text...'\n                    />\n                </div>\n                <div className={styles.bottomSide}>\n                    <div>\n                        <TwitterPicker\n                            onChangeComplete={(color) => setColor(color.hex)}\n                            color={color}\n                        />\n                    </div>\n                    <div className={styles.controls}>\n                        { id !== null && noteInfo &&\n                            <button\n                                className={styles.favourite}\n                                onClick={editFavourite}\n                            >\n                                <span>{noteInfo.favourite ? 'Remove from' : 'Add to'} favourite</span>\n                                <img src={starIcon} alt=\"Add to favourite\"/>\n                            </button>\n                        }\n                        <div className={styles.buttons}>\n                            <button\n                                onClick={id === null ? addNewNote : editNote}\n                            >Apply</button>\n                            <button\n                                onClick={closeClickHandler}\n                            >Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}","import React from 'react';\nimport Container from \"./components/Container\";\nimport Modal from './components/Modal'\nimport {useSelector} from \"react-redux\";\nimport {getModalVisibility} from \"./redux/selectors/modalSelector\";\n\nfunction App() {\n    const {visible} = useSelector(getModalVisibility)\n\n    return (\n        <div>\n            <Container />\n            { visible &&\n                <Modal />\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport modalReducer from './slices/modalSlice'\nimport notesReducer from './slices/notesSlice'\n\nexport const store = configureStore({\n    reducer: {\n        modal: modalReducer,\n        notes: notesReducer\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\nimport {DndProvider} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <DndProvider backend={HTML5Backend}>\n            <App />\n        </DndProvider>\n    </Provider>,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switcher\":\"Switcher_switcher__1HLxH\",\"active\":\"Switcher_active__1ihjF\"};"],"sourceRoot":""}